
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # # 代理请求 fat1环境 后台接口地址
        # location /fat {
        #     rewrite ^/fat/(.*) /$1 break; # 重写请求路径 $1 为 (.*) 正则表达式匹配的内容
        #     proxy_pass http://127.0.0.1:3100/; # fat环境地址
        #     proxy_redirect default;
        # }

        # 代理请求 fat1环境 后台接口地址
        location /fat/ {
            proxy_pass http://127.0.0.1:3100/; # fat环境地址
            proxy_redirect default;
        }
        # 代理请求 uat环境 后台接口地址
        location /uat/ {
            proxy_pass http://127.0.0.1:3200/; # uat环境地址
            proxy_redirect default;
        }
        # 代理请求 生产环境 后台接口地址
        location /pro/ {
            proxy_pass http://127.0.0.1/; # 生产环境地址
            proxy_redirect default;
        }

        # 设置其它请求头
        add_header _upstream_addr $upstream_addr;
        add_header _remote_addr $remote_addr;
        add_header _remote_port $remote_port;
        add_header _remote_user $remote_user;
        add_header _host $host;
        add_header _http_host $http_host;
        add_header _http_user_agent $http_user_agent;
        add_header _http_cookie $http_cookie;
        add_header _server_protocol $server_protocol;
        add_header _server_name $server_name;
        add_header _server_port $server_port;
        add_header _document_uri $document_uri;
        add_header _uri $uri;
        add_header _request_method $request_method;
        add_header _request_uri $request_uri;
        add_header _request_filename $request_filename;
        add_header _query_string $query_string;
        add_header _args $args;
        add_header _time_local $time_local;
        add_header _time_iso8601 $time_iso8601;


        # 设置CORS跨域
        # add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Origin $http_host;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

        if ($request_method = 'OPTIONS') {
            return 204;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
